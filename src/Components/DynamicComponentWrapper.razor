@using Microsoft.AspNetCore.Components
@using System.Reflection
@using System.Collections.Generic

@if (ComponentType != null)
{
    var propertiesDictionary = GetPropertiesDictionary(ComponentParameters);
    <DynamicComponent Type="ComponentType" Parameters="propertiesDictionary" />
}
else if (ChildContent != null)
{
    @ChildContent
}

@code {
    [Parameter, EditorRequired]
    public Type? ComponentType { get; set; }

    [Parameter]
    public object? ComponentParameters { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private Dictionary<string, object> GetPropertiesDictionary(object? parameter)
    {
        var dictionary = new Dictionary<string, object>();
        if (parameter != null)
        {
            var properties = parameter.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
            //var isComponent = parameter is IComponent;

            foreach (var propInfo in properties)
            {
                //if (!isComponent || propInfo.IsDefined(typeof(Microsoft.AspNetCore.Components.ParameterAttribute), inherit: false))
                {
                    var value = propInfo.GetValue(parameter);
                    if (value != null)
                    {
                        dictionary[propInfo.Name] = value;
                    }
                }
            }
        }
        if (ChildContent != null)
        {
            dictionary[nameof(ChildContent)] = ChildContent;
        }

        return dictionary;
    }

    private static int _nextId = 1;
    public static string GetNextId(string format = "rgf-id-{0}") => string.Format(format, _nextId++);

    internal static RenderFragment Create(Type componentType, object componentParameters) =>
        @<DynamicComponentWrapper ComponentType="@componentType" ComponentParameters="@componentParameters" />;

    internal static RenderFragment CreateDynamicComponent(Type componentType, string parameterName, object componentParameter, IRgManager manager)
    {
        var parameter = new Dictionary<string, object>() { { parameterName, componentParameter } };
        if (manager != null)
        {
            parameter.Add("Manager", manager);
        }
        return builder =>
            {
                int sequence = 0;
                builder.OpenComponent<DynamicComponent>(sequence++);
                builder.AddAttribute(sequence++, nameof(DynamicComponent.Type), componentType);
                builder.AddAttribute(sequence++, nameof(DynamicComponent.Parameters), parameter);
                builder.CloseComponent();
            };
    }
}
